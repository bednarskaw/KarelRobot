language Karel
{
  target java
  {
    header
    {#
package lang.karel;
import java.util.*;
import java.io.*;
import org.json.*;
import javax.swing.*;
import static lang.karel.Karel.*;
import lang.karel.KarelVisualizer;
    #}
  }

  domains
  {
    Number = Num[NUM];
    Command = Forward + ForwardN[Number] + TurnLeft + TurnRight + PutBeeper + PickBeeper + Reset + Skip + Seq[Command,Command] + IfElse[Condition, Command, Command] + While[Condition, Command];
    Condition = FrontIsClear + FrontIsBlocked + LeftIsClear + LeftIsBlocked + RightIsClear + RightIsBlocked + BackIsClear + BackIsBlocked;
    Program = Prog[Command];
  }

  printer
  {
    domain Number { case Num[n] → # _result = n; #; }
    domain Condition {
      case FrontIsClear     → # _result = "FRONT-IS-CLEAR"; #;
      case FrontIsBlocked   → # _result = "FRONT-IS-BLOCKED"; #;
      case LeftIsClear      → # _result = "LEFT-IS-CLEAR"; #;
      case LeftIsBlocked    → # _result = "LEFT-IS-BLOCKED"; #;
      case RightIsClear     → # _result = "RIGHT-IS-CLEAR"; #;
      case RightIsBlocked   → # _result = "RIGHT-IS-BLOCKED"; #;
      case BackIsClear      → # _result = "BACK-IS-CLEAR"; #;
      case BackIsBlocked    → # _result = "BACK-IS-BLOCKED"; #;
    }
    domain Command
    {
      case Forward → # _result = "FORWARD"; #;
      case ForwardN[n] → # _result = "FORWARD-" + n; #;
      case TurnLeft → # _result = "TLEFT"; #;
      case TurnRight → # _result = "TRIGHT"; #;
      case PutBeeper → # _result = "PUTBEEPER"; #;
      case PickBeeper → # _result = "PICKBEEPER"; #;
      case Reset → # _result = "RESET"; #;
      case Skip → # _result = "SKIP"; #;
      case Seq[c1,c2] → # _result = c1 + ":" + c2; #;
      case IfElse[b, c1, c2] → # _result = b + ":IFELSE(" + c1 + ", " + c2 + ")"; #;
      case While[b, c] → # _result = "WHILE(" + b + ", " + c + ")"; #;
    }
    domain Program { case Prog[c] → # _result = c.toString(); #; }
  }

  parser antlr4
  {
    domain Number { case # n=dNUM # → Num[n]; }
    domain Condition {
      case # 'front-is-clear' # → FrontIsClear;
      case # 'front-is-blocked' # → FrontIsBlocked;
      case # 'left-is-clear' # → LeftIsClear;
      case # 'left-is-blocked' # → LeftIsBlocked;
      case # 'right-is-clear' # → RightIsClear;
      case # 'right-is-blocked' # → RightIsBlocked;
      case # 'back-is-clear' # → BackIsClear;
      case # 'back-is-blocked' # → BackIsBlocked;
    }
    domain Command
    {
      case # 'forward' # → Forward;
      case # 'forward' n=dNumber # → ForwardN[n];
      case # 'turn' 'left' # → TurnLeft;
      case # 'turn' 'right' # → TurnRight;
      case # 'pickbeeper' # → PickBeeper;
      case # 'putbeeper' # → PutBeeper;
      case # 'reset' # → Reset;
      case # 'skip' # → Skip;
      case # 'if' b=dCondition 'then' c1=dCommand 'else' c2=dCommand # → IfElse[b, c1, c2];
      case # 'while' b=dCondition 'do' '(' c=dCommand ')' # → While[b, c];
      case # 'while' b=dCondition 'do' c=dCommand # → While[b, c];
      case # c1=dCommand ';' c2=dCommand # → Seq[c1,c2];
    }
    domain Program { case # c=dCommand ( ';' c2=dCommand )* ';'? EOF # → Prog[c]; }
  }
  judgment ⊢ Condition: condition {
    inference ⊢ FrontIsClear: condition {}
    inference ⊢ FrontIsBlocked: condition {}
    inference ⊢ LeftIsClear: condition {}
    inference ⊢ LeftIsBlocked: condition {}
    inference ⊢ RightIsClear: condition {}
    inference ⊢ RightIsBlocked: condition {}
    inference ⊢ BackIsClear: condition {}
    inference ⊢ BackIsBlocked: condition {}
  }

  judgment ⊢ Command: command
  {
    inference ⊢ Forward: command {}
    inference ⊢ ForwardN[n]: command {}
    inference ⊢ TurnLeft: command {}
    inference ⊢ TurnRight: command {}
    inference ⊢ Reset: command {}
    inference ⊢ Skip: command {}
    inference ⊢ PutBeeper: command {}
    inference ⊢ PickBeeper: command {}
    inference ⊢ Seq[c1,c2]: command { ⊢ c1: command; ⊢ c2: command; }
    inference ⊢ IfElse[b, c1, c2]: command {
      ⊢ b: condition;
      ⊢ c1: command;
      ⊢ c2: command;
    }
    inference ⊢ While[b, c]: command {
      ⊢ b: condition;
      ⊢ c: command;
    }
  }

  judgment ⊢ Program: program
  {
    inference ⊢ Prog[c]: program { ⊢ c: command; }
  }

  code
  {#
    public static class World {
      public static Set<List<Integer>> beeperMap = new HashSet<>();
      public static List<int[]> movement = new ArrayList<>();
      public static List<boolean[][]> beeperGrid = new ArrayList<>();
      public static List<Integer> beeperInventory = new ArrayList<>();
      public static Set<List<Integer>> walls = new HashSet<>();
      public static int gridWidth = 10;
      public static int gridHeight = 10;
    }

    public static void captureStep(int x, int y, int dir, int beeperCount) {
      World.movement.add(new int[]{x, y, dir});
      World.beeperInventory.add(beeperCount);
      boolean[][] grid = new boolean[World.gridWidth][World.gridHeight];
      for (List<Integer> pos : World.beeperMap) {
        int bx = pos.get(0), by = pos.get(1);
        if (bx >= 0 && bx < World.gridWidth && by >= 0 && by < World.gridHeight)
          grid[bx][by] = true;
      }

      World.beeperGrid.add(grid);
    }

    public static boolean canMove(int x, int y, int dir) {
      int nx = x, ny = y;
      if (dir == 0) ny += 1;
      else if (dir == 90) nx += 1;
      else if (dir == 180) ny -= 1;
      else if (dir == 270) nx -= 1;

      if (nx < 0 || nx >= World.gridWidth || ny < 0 || ny >= World.gridHeight) {
        return false;
      }

      if (World.walls.contains(Arrays.asList(x, y, nx, ny))) return false;

      return true;
    }

  #}

  function N〚Number〛: #Integer#
  {
    equation N〚Num[n]〛 = i { i = #Integer.valueOf(n)#; }
  }

  function Exec〚Command〛: #List<int[]># → #List<int[]>#
  {
    equation Exec〚Forward〛(s0) = s {
      x: #int# = #s0.getLast()[0]#;
      y: #int# = #s0.getLast()[1]#;
      dir: #int# = #s0.getLast()[2]#;
      beeper: #int# = #s0.getLast()[3]#;
      # if (dir == 0) y += 1;
        else if (dir == 90) x += 1;
        else if (dir == 180) y -= 1;
        else if (dir == 270) x -= 1;
        s0.add(new int[]{x, y, dir, beeper});
        captureStep(x, y, dir, beeper); #
      s = s0;
    }

    equation Exec〚ForwardN[n]〛(s0) = s {
      steps = N〚n〛;
      x: #int# = #s0.getLast()[0]#;
      y: #int# = #s0.getLast()[1]#;
      dir: #int# = #s0.getLast()[2]#;
      beeper: #int# = #s0.getLast()[3]#;
      # for (int i = 0; i < steps; i++) {
          if (dir == 0) y += 1;
          else if (dir == 90) x += 1;
          else if (dir == 180) y -= 1;
          else if (dir == 270) x -= 1;
          s0.add(new int[]{x, y, dir, beeper});
          captureStep(x, y, dir, beeper);
        } #
      s = s0;
    }

    equation Exec〚TurnLeft〛(s0) = s {
      dir: #int# = #(s0.getLast()[2] + 270) % 360#;
      x: #int# = #s0.getLast()[0]#;
      y: #int# = #s0.getLast()[1]#;
      beeper: #int# = #s0.getLast()[3]#;
      # s0.add(new int[]{x, y, dir, beeper});
        captureStep(x, y, dir, beeper); #
      s = s0;
    }

    equation Exec〚TurnRight〛(s0) = s {
      dir: #int# = #(s0.getLast()[2] + 90) % 360#;
      x: #int# = #s0.getLast()[0]#;
      y: #int# = #s0.getLast()[1]#;
      beeper: #int# = #s0.getLast()[3]#;
      # s0.add(new int[]{x, y, dir, beeper});
        captureStep(x, y, dir, beeper); #
      s = s0;
    }

    equation Exec〚PickBeeper〛(s0) = s {
      x: #int# = #s0.getLast()[0]#;
      y: #int# = #s0.getLast()[1]#;
      dir: #int# = #s0.getLast()[2]#;
      beeperCount: #int# = #s0.getLast()[3]#;
      # List<Integer> pos = Arrays.asList(x, y);
        if (World.beeperMap.contains(pos)) {
          World.beeperMap.remove(pos);
          beeperCount += 1;
        }
        s0.add(new int[]{x, y, dir, beeperCount});
        captureStep(x, y, dir, beeperCount); #
      s = s0;
    }

    equation Exec〚PutBeeper〛(s0) = s {
      x: #int# = #s0.getLast()[0]#;
      y: #int# = #s0.getLast()[1]#;
      dir: #int# = #s0.getLast()[2]#;
      beeperCount: #int# = #s0.getLast()[3]#;
      # if (beeperCount > 0) {
          beeperCount -= 1;
          World.beeperMap.add(Arrays.asList(x, y));
        }
        s0.add(new int[]{x, y, dir, beeperCount});
        captureStep(x, y, dir, beeperCount); #
      s = s0;
    }

    equation Exec〚Reset〛(s0) = s {
      # s0.clear(); s0.add(new int[]{0, 0, 0, 0});
        captureStep(0, 0, 0, 0); #
      s = s0;
    }

    equation Exec〚Skip〛(s0) = s {
      x: #int# = #s0.getLast()[0]#;
      y: #int# = #s0.getLast()[1]#;
      dir: #int# = #s0.getLast()[2]#;
      beeperCount: #int# = #s0.getLast()[3]#;
      # captureStep(x, y, dir, beeperCount); #
      s = s0;
    }

    equation Exec〚Seq[c1,c2]〛(s) = s2 {
      s1 = Exec〚c1〛(s);
      s2 = Exec〚c2〛(s1);
    }

    equation Exec〚IfElse[b, c1, c2]〛(s0) = s {
      cond = Check〚b〛(s0);
      s = # cond ? Command_Exec.operation(c1).apply(s0)
                 : Command_Exec.operation(c2).apply(s0); #;
    }

    equation Exec〚While[b, c]〛(s0) = s {
      {#
        var _cond = Condition_Check.operation(b);
        var _body = Command_Exec.operation(c);
        while (_cond.apply(s0)) {
          s0 = _body.apply(s0);
        }
      #}
      s = s0;
    }


  }

  function Exec〚Program〛: #Void#
  {
    equation Exec〚Prog[c]〛 = none {
      s0: #List<int[]># = # new ArrayList<>(); #;
      # try {
          File currentDir = new File(".");
          File[] jsonFiles = currentDir.listFiles((dir, name) -> name.endsWith(".json"));
          if (jsonFiles == null || jsonFiles.length == 0) {
              System.out.println("Error: No .json file found in current directory.");
              return null;
          }
          if (jsonFiles.length > 1) {
              System.out.println("Error: Multiple .json files found. Please keep only one.");
              return null;
          }

          FileReader reader = new FileReader(jsonFiles[0]);
          StringBuilder sb = new StringBuilder();
          int ch;
          while ((ch = reader.read()) != -1) sb.append((char) ch);
          reader.close();

          JSONObject json = new JSONObject(sb.toString());

           if (json.has("grid")) {
            JSONObject grid = json.getJSONObject("grid");
            if (grid.has("width")) {
              World.gridWidth = grid.getInt("width");
            }
            if (grid.has("height")) {
              World.gridHeight = grid.getInt("height");
            }
          }
          if (json.has("walls")) {
            JSONArray wallArr = json.getJSONArray("walls");
            for (int i = 0; i < wallArr.length(); i++) {
              JSONObject w = wallArr.getJSONObject(i);
              int x1 = w.getInt("x");
              int y1 = w.getInt("y");
              int x2 = w.getInt("x'");
              int y2 = w.getInt("y'");
              World.walls.add(Arrays.asList(x1, y1, x2, y2));
              World.walls.add(Arrays.asList(x2, y2, x1, y1));
            }
          }
          JSONObject robot = json.getJSONObject("robot");
          int startX = robot.getInt("x");
          int startY = robot.getInt("y");
          int startDir = robot.getInt("dir");
          int startBeepers = robot.getInt("beeperCount");

          JSONArray beepersArr = json.getJSONArray("beepers");
          for (int i = 0; i < beepersArr.length(); i++) {
            JSONObject b = beepersArr.getJSONObject(i);
            int bx = b.getInt("x");
            int by = b.getInt("y");
            World.beeperMap.add(Arrays.asList(bx, by));
          }

          s0.add(new int[]{startX, startY, startDir, startBeepers});
          captureStep(startX, startY, startDir, startBeepers);
        } catch (Exception e) {
          System.out.println("Error reading JSON: " + e.getMessage());
          s0.add(new int[]{0, 0, 0, 0});
          captureStep(0, 0, 0, 0);
        }

      System.out.println("Exec"); #
      s = Exec〚c〛(s0);
      none = # null #;
    }
    after {#
      System.out.println("Input passed to parser:");
      Scanner inputScanner = new Scanner(System.in);
      while (inputScanner.hasNextLine()) {
        String line = inputScanner.nextLine();
        System.out.println(line);
      }

      System.out.println("\nParsed program:");
      String parsed = c.toString();
      System.out.println(parsed);

      System.out.println("\nDerived from execution:");

      List<String> actions = new ArrayList<>();
      String[] rawParts = parsed.split(":");
      for (int i = 0; i < rawParts.length; i++) {
        String part = rawParts[i];
        if (part.startsWith("WHILE(") || part.startsWith("IFELSE(")) {
          StringBuilder full = new StringBuilder(part);
          int depth = 0;
          for (char ch : part.toCharArray()) {
            if (ch == '(') depth++;
            else if (ch == ')') depth--;
          }
          while (depth > 0 && i + 1 < rawParts.length) {
            i++;
            full.append(":").append(rawParts[i]);
            for (char ch : rawParts[i].toCharArray()) {
              if (ch == '(') depth++;
              else if (ch == ')') depth--;
            }
          }
          actions.add(full.toString());
        } else {
          actions.add(part);
        }
      }

      int x = World.movement.get(0)[0];
      int y = World.movement.get(0)[1];
      int dir = World.movement.get(0)[2];

      for (int i = 0; i < actions.size(); i++) {
        String current = actions.get(i);

        if (current.startsWith("WHILE(")) {
          int startIdx = current.indexOf('(');
          int depth = 0;
          int endIdx = -1;
          for (int j = startIdx; j < current.length(); j++) {
            char ch = current.charAt(j);
            if (ch == '(') depth++;
            else if (ch == ')') depth--;
            if (depth == 0) {
              endIdx = j;
              break;
            }
          }
          if (endIdx == -1) throw new RuntimeException("No closing ')' found in WHILE(...)");

          String inner = current.substring(startIdx + 1, endIdx);
          int commaIdx = -1;
          depth = 0;
          for (int j = 0; j < inner.length(); j++) {
            char ch = inner.charAt(j);
            if (ch == '(') depth++;
            else if (ch == ')') depth--;
            else if (ch == ',' && depth == 0) {
              commaIdx = j;
              break;
            }
          }

          if (commaIdx == -1) throw new RuntimeException("Malformed WHILE: no top-level comma found");

          String cond = inner.substring(0, commaIdx).trim();
          String body = inner.substring(commaIdx + 1).trim();
          String unfolded = String.format("IFELSE(%s:%s, SKIP)", body, current);

          System.out.printf("<%s, ε, ((%d, %d), %d)>>%n", current, x, y, dir);
          System.out.printf("<%s:%s, ε, ((%d, %d), %d)>>%n", cond, unfolded, x, y, dir);

          actions.set(i, cond);
          actions.add(i + 1, unfolded);
          i--;
          continue;
        }

        if (current.startsWith("FORWARD-")) {
          int step = Integer.parseInt(current.split("-")[1]);

          // wypisz krok jako FORWARD-n
          String currentState = String.join(":", actions.subList(i, actions.size()));
          System.out.printf("<%s, ε, ((%d, %d), %d)>>%n", currentState, x, y, dir);

          // wykonanie nastąpi w kolejnych iteracjach
          actions.remove(i);
          actions.add(i, "FORWARD");
          if (step == 2) {
            actions.add(i + 1, "FORWARD");
          } else {
            actions.add(i + 1, "FORWARD-" + (step - 1));
          }

          i--; // wracamy na początek rozwinięcia
          continue;
        }


        if (i + 1 < actions.size() && actions.get(i + 1).startsWith("IFELSE(")) {
          String cond = current;
          String branch = actions.get(i + 1);
          boolean result = false;

          switch (cond) {
            case "FRONT-IS-CLEAR": result = canMove(x, y, dir); break;
            case "FRONT-IS-BLOCKED": result = !canMove(x, y, dir); break;
            case "LEFT-IS-CLEAR": result = canMove(x, y, (dir + 270) % 360); break;
            case "LEFT-IS-BLOCKED": result = !canMove(x, y, (dir + 270) % 360); break;
            case "RIGHT-IS-CLEAR": result = canMove(x, y, (dir + 90) % 360); break;
            case "RIGHT-IS-BLOCKED": result = !canMove(x, y, (dir + 90) % 360); break;
            case "BACK-IS-CLEAR": result = canMove(x, y, (dir + 180) % 360); break;
            case "BACK-IS-BLOCKED": result = !canMove(x, y, (dir + 180) % 360); break;
          }

          String content = branch.substring("IFELSE(".length(), branch.length() - 1);
          int depth2 = 0;
          int splitIndex = -1;
          for (int j = 0; j < content.length(); j++) {
            char ch = content.charAt(j);
            if (ch == '(') depth2++;
            else if (ch == ')') depth2--;
            else if (ch == ',' && depth2 == 0) {
              splitIndex = j;
              break;
            }
          }

          String part1 = content.substring(0, splitIndex).trim();
          String part2 = content.substring(splitIndex + 1).trim();
          String chosen = result ? part1 : part2;

          System.out.printf("<%s, %s, ((%d, %d), %d)>>%n", branch, cond, x, y, dir);

          actions.remove(i); // cond
          actions.remove(i); // IFELSE

          List<String> partsBack = new ArrayList<>();
          int depth = 0, start = 0;
          for (int j = 0; j < chosen.length(); j++) {
            char ch = chosen.charAt(j);
            if (ch == '(') depth++;
            else if (ch == ')') depth--;
            else if (ch == ':' && depth == 0) {
              String part = chosen.substring(start, j).trim();
              if (!part.isEmpty()) partsBack.add(part);
              start = j + 1;
            }
          }
          String last = chosen.substring(start).trim();
          if (!last.isEmpty()) partsBack.add(last);

          actions.addAll(i, partsBack);
          i--;
          continue;
        }

        if (current.trim().isEmpty()) continue;

        // Filtrowanie nadmiarowych rozwinięć
        if (!current.contains("WHILE(") && current.chars().filter(ch -> ch == ':').count() > 3) {
          System.out.printf("<ε, ε, ((%d, %d), %d)>>%n", x, y, dir);
          break;
        }

        String currentState = String.join(":", actions.subList(i, actions.size()));
        System.out.printf("<%s, ε, ((%d, %d), %d)>>%n", currentState, x, y, dir);

        // Wykonanie ruchu
        if (current.equals("FORWARD")) {
          if (dir == 0) y += 1;
          else if (dir == 90) x += 1;
          else if (dir == 180) y -= 1;
          else if (dir == 270) x -= 1;
        } else if (current.equals("TRIGHT")) {
          dir = (dir + 90) % 360;
        } else if (current.equals("TLEFT")) {
          dir = (dir + 270) % 360;
        }
      }

      System.out.printf("<ε, ε, ((%d, %d), %d)>>%n", x, y, dir);
      System.out.println("Final Machine State:");
      System.out.printf("((%d, %d), %d)%n", x, y, dir);

      lang.karel.KarelVisualizer.createAndShowGUI(
        new lang.karel.KarelVisualizer(
          World.movement,
          World.beeperGrid,
          World.beeperInventory,
          World.gridWidth,
          World.gridHeight,
          World.walls
        )
      );
    #}



  }

  function Check〚Condition〛: #List<int[]># → #boolean# {
    equation Check〚FrontIsClear〛(s0) = b {
      x: #int# = #s0.getLast()[0]#;
      y: #int# = #s0.getLast()[1]#;
      dir: #int# = #s0.getLast()[2]#;
      # b = canMove(x, y, dir); #
    }

    equation Check〚FrontIsBlocked〛(s0) = b {
      x: #int# = #s0.getLast()[0]#;
      y: #int# = #s0.getLast()[1]#;
      dir: #int# = #s0.getLast()[2]#;
      # b = !canMove(x, y, dir); #
    }

    equation Check〚LeftIsClear〛(s0) = b {
      x: #int# = #s0.getLast()[0]#;
      y: #int# = #s0.getLast()[1]#;
      dir: #int# = #(s0.getLast()[2] + 270) % 360#;
      # b = canMove(x, y, dir); #
    }

    equation Check〚LeftIsBlocked〛(s0) = b {
      x: #int# = #s0.getLast()[0]#;
      y: #int# = #s0.getLast()[1]#;
      dir: #int# = #(s0.getLast()[2] + 270) % 360#;
      # b = !canMove(x, y, dir); #
    }

    equation Check〚RightIsClear〛(s0) = b {
      x: #int# = #s0.getLast()[0]#;
      y: #int# = #s0.getLast()[1]#;
      dir: #int# = #(s0.getLast()[2] + 90) % 360#;
      # b = canMove(x, y, dir); #
    }

    equation Check〚RightIsBlocked〛(s0) = b {
      x: #int# = #s0.getLast()[0]#;
      y: #int# = #s0.getLast()[1]#;
      dir: #int# = #(s0.getLast()[2] + 90) % 360#;
      # b = !canMove(x, y, dir); #
    }

    equation Check〚BackIsClear〛(s0) = b {
      x: #int# = #s0.getLast()[0]#;
      y: #int# = #s0.getLast()[1]#;
      dir: #int# = #(s0.getLast()[2] + 180) % 360#;
      # b = canMove(x, y, dir); #
    }

    equation Check〚BackIsBlocked〛(s0) = b {
      x: #int# = #s0.getLast()[0]#;
      y: #int# = #s0.getLast()[1]#;
      dir: #int# = #(s0.getLast()[2] + 180) % 360#;
      # b = !canMove(x, y, dir); #
    }
  }
}